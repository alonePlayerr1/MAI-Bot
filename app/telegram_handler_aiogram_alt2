import asyncio
import logging
import os
import re
import tempfile
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, FSInputFile, Document, KeyboardButton, ReplyKeyboardMarkup
from aiogram.enums import ChatAction

import config
from config import LectureRegistration, DevProcessing
from app import utils
from app import drive_handler
from app import cloud_storage
from app import audio_processor
from app import text_analyzer
from app import doc_generator

from pydub import AudioSegment
from pydub.exceptions import CouldntDecodeError

# --- –°–æ–∑–¥–∞–µ–º –†–æ—É—Ç–µ—Ä—ã ---
common_router = Router(name="common_commands")
registration_router = Router(name="lecture_registration_fsm")
dev_router = Router(name="developer_tools")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
confirmation_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")],
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

correction_options_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")],
        [KeyboardButton(text="2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É")],
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# --- –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã ---
@common_router.message(CommandStart())
async def handle_start(message: Message, state: FSMContext):
    chat_id = message.chat.id
    logging.info(f"/start from {chat_id}")
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—à—É –ª–µ–∫—Ü–∏—é.", reply_markup=ReplyKeyboardRemove())
    await message.answer("1. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:")
    await state.set_state(LectureRegistration.waiting_discipline)

@common_router.message(Command("reset"))
async def handle_reset(message: Message, state: FSMContext):
    chat_id = message.chat.id
    current_state = await state.get_state()
    logging.info(f"/reset from {chat_id}. State: {current_state}")
    await state.clear()
    await message.answer("üîÑ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.", reply_markup=ReplyKeyboardRemove())

@common_router.message(Command("retry"))
async def handle_retry(message: Message, state: FSMContext):
    chat_id = message.chat.id
    current_state = await state.get_state()
    logging.info(f"/retry from {chat_id}. State: {current_state}")
    
    if current_state in [
        LectureRegistration.waiting_discipline,
        LectureRegistration.waiting_teacher,
        LectureRegistration.waiting_datetime,
        LectureRegistration.waiting_drive_link,
        LectureRegistration.waiting_confirmation,
        LectureRegistration.waiting_correction_choice
    ]:
        await state.set_state(LectureRegistration.waiting_discipline)
        await message.answer("üîÑ –í–æ–∑–≤—Ä–∞—â–∞—é –∫ –Ω–∞—á–∞–ª—É –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.\n1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:", reply_markup=ReplyKeyboardRemove())
    elif current_state in [
        DevProcessing.waiting_dev_discipline,
        DevProcessing.waiting_dev_teacher,
        DevProcessing.waiting_dev_datetime,
        DevProcessing.waiting_transcript_txt
    ]:
        await state.set_state(DevProcessing.waiting_dev_discipline)
        await message.answer("üîÑ DEV: –í–æ–∑–≤—Ä–∞—â–∞—é –∫ –Ω–∞—á–∞–ª—É –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.\n1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=ReplyKeyboardRemove())

@common_router.message(Command("help"))
async def handle_help(message: Message):
    help_text = (
        "üìö –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ª–µ–∫—Ü–∏–∏\n"
        "/reset - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
        "/retry - –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω–æ–≤–æ\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "<b>–í –ª—é–±–æ–º –º–µ—Å—Ç–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã –º–æ–∂–µ—Ç–µ:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /reset –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /retry —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥ –∑–∞–Ω–æ–≤–æ\n\n"
        "<b>–§–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö:</b>\n"
        "‚Ä¢ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: –ò–≤–∞–Ω–æ–≤–ò–ò (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)\n"
        "‚Ä¢ –î–∞—Ç–∞/–≤—Ä–µ–º—è: –ß–ß:–ú–ú-–î–î.–ú–ú.–ì–ì–ì–ì"
    )
    await message.reply(help_text, reply_markup=ReplyKeyboardRemove())

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ª–µ–∫—Ü–∏–∏) ---
class LectureRegistration:
    waiting_discipline = "waiting_discipline"
    waiting_teacher = "waiting_teacher"
    waiting_datetime = "waiting_datetime"
    waiting_confirmation = "waiting_confirmation"
    waiting_correction_choice = "waiting_correction_choice"
    waiting_drive_link = "waiting_drive_link"

@registration_router.message(StateFilter(LectureRegistration.waiting_discipline), F.text)
async def handle_discipline(message: Message, state: FSMContext):
    if message.text.startswith('/'):
        return
    
    discipline_name = message.text.strip()
    
    if not discipline_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    logging.info(f"Discipline '{discipline_name}' received")
    await state.update_data(discipline=discipline_name)
    await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: '{discipline_name}'.\n2. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤–ò–ò):")
    await state.set_state(LectureRegistration.waiting_teacher)

@registration_router.message(StateFilter(LectureRegistration.waiting_teacher), F.text)
async def handle_teacher_name(message: Message, state: FSMContext):
    if message.text.startswith('/'):
        return
    
    teacher_name = message.text.strip()
    
    if not teacher_name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
        
    if ' ' in teacher_name:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–æ–¥–∏—Ç–µ –§–ò–û –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤–ò–ò).")
        return
    
    logging.info(f"Teacher '{teacher_name}' received")
    await state.update_data(teacher_name=teacher_name)
    await message.answer(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: '{teacher_name}'.\n3. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–ß–ß:–ú–ú-–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(LectureRegistration.waiting_datetime)

@registration_router.message(StateFilter(LectureRegistration.waiting_datetime), F.text)
async def handle_datetime(message: Message, state: FSMContext):
    datetime_input = message.text.strip()
    if not datetime_input:
        await message.answer("–î–∞—Ç–∞/–≤—Ä–µ–º—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.", reply_markup=ReplyKeyboardRemove())
        return
    
    try:
        time_str, date_str = datetime_input.split(config.DATETIME_SPLIT_CHAR)
        datetime.strptime(time_str, config.TIME_FORMAT)
        datetime.strptime(date_str, config.DATE_FORMAT)
        
        await state.update_data(lection_time=time_str, lection_date=date_str)
        logging.info(f"DateTime '{datetime_input}' received")
        
        user_data = await state.get_data()
        
        confirmation_message = (
            "üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"‚Ä¢ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {user_data.get('discipline', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚Ä¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {user_data.get('teacher_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚Ä¢ –î–∞—Ç–∞/–≤—Ä–µ–º—è: {time_str} {date_str}\n\n"
            "–í—Å–µ –≤–µ—Ä–Ω–æ?"
        )
        
        await message.answer(confirmation_message, reply_markup=confirmation_keyboard)
        await state.set_state(LectureRegistration.waiting_confirmation)
        
    except (ValueError, TypeError):
        await message.answer(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –Ω—É–∂–µ–Ω –ß–ß:–ú–ú{config.DATETIME_SPLIT_CHAR}–î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=ReplyKeyboardRemove())

@registration_router.message(StateFilter(LectureRegistration.waiting_confirmation), F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def handle_confirmation(message: Message, state: FSMContext):
    if message.text == "–î–∞":
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É Google Drive.", reply_markup=ReplyKeyboardRemove())
        await state.set_state(LectureRegistration.waiting_drive_link)
    else:
        await message.answer("–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=correction_options_keyboard)
        await state.set_state(LectureRegistration.waiting_correction_choice)

@registration_router.message(StateFilter(LectureRegistration.waiting_correction_choice))
async def handle_correction_choice(message: Message, state: FSMContext):
    choice = message.text
    if choice == "1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(LectureRegistration.waiting_discipline)
    elif choice == "2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤–ò–ò):", reply_markup=ReplyKeyboardRemove())
        await state.set_state(LectureRegistration.waiting_teacher)
    elif choice == "3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–ß–ß:–ú–ú-–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=ReplyKeyboardRemove())
        await state.set_state(LectureRegistration.waiting_datetime)
    elif choice == "–û—Ç–º–µ–Ω–∞":
        user_data = await state.get_data()
        confirmation_message = (
            "üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"‚Ä¢ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {user_data.get('discipline', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚Ä¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {user_data.get('teacher_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚Ä¢ –î–∞—Ç–∞/–≤—Ä–µ–º—è: {user_data.get('lection_time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')} {user_data.get('lection_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
            "–í—Å–µ –≤–µ—Ä–Ω–æ?"
        )
        await message.answer(confirmation_message, reply_markup=confirmation_keyboard)
        await state.set_state(LectureRegistration.waiting_confirmation)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.", reply_markup=correction_options_keyboard)

@registration_router.message(StateFilter(LectureRegistration.waiting_drive_link), F.text)
async def handle_drive_link(message: Message, state: FSMContext, bot: Bot):
    chat_id = message.chat.id
    drive_link = message.text.strip() if message.text else None
    user_data = await state.get_data()

    downloaded_drive_file_path = None
    converted_temp_file_path = None
    generated_doc_path = None
    detected_sample_rate = 0
    structured_filename = None

    if not drive_link or not re.search(r'drive.google.com/(file/d/|open\?id=|/d/)', drive_link):
        logging.warning(f"Invalid Google Drive link from chat_id {chat_id}: {drive_link}")
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≤ Google Drive.")
        return

    logging.info(f"Google Drive link received from chat_id {chat_id}: {drive_link}")
    await message.answer(f"‚úÖ –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!")

    try:
        await message.answer(f"üì• –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Google Drive...")
        await bot.send_chat_action(chat_id, action=ChatAction.TYPING)
        logging.info(f"Starting Drive download for chat_id {chat_id}")

        downloaded_drive_file_path = await asyncio.to_thread(
            drive_handler.download_file_from_drive, drive_link
        )

        if not downloaded_drive_file_path:
            logging.error(f"Failed to download file from Google Drive for chat_id {chat_id}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ Google Drive. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.")
            await state.clear()
            return

        logging.info(f"File downloaded from Drive to {downloaded_drive_file_path} for chat_id {chat_id}")
        await message.answer("üëç –§–∞–π–ª –∏–∑ Google Drive —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω.")
        await bot.send_chat_action(chat_id, action=ChatAction.TYPING)

        await message.answer("‚öôÔ∏è –ì–æ—Ç–æ–≤–ª—é –∞—É–¥–∏–æ—Ñ–∞–π–ª (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ —Ñ–æ—Ä–º–∞—Ç Opus)...")
        logging.info(f"Starting audio processing for chat_id {chat_id}")
        output_extension = ".ogg"
        structured_filename = utils.generate_audio_filename(user_data, None, output_extension)

        def process_audio_sync(input_path, output_dir, filename):
            temp_path_conv = None
            TARGET_SAMPLE_RATE = 16000
            try:
                audio = AudioSegment.from_file(input_path)
                original_rate = audio.frame_rate
                logging.info(f"Audio loaded: {audio.duration_seconds:.2f} sec, Rate: {original_rate} Hz, Channels: {audio.channels}")

                if audio.channels > 1:
                    logging.info("Converting to mono...")
                    audio = audio.set_channels(1)

                if original_rate != TARGET_SAMPLE_RATE:
                    logging.info(f"Resampling from {original_rate} Hz to {TARGET_SAMPLE_RATE} Hz...")
                    try:
                        audio = audio.set_frame_rate(TARGET_SAMPLE_RATE)
                        logging.info(f"Successfully resampled to {audio.frame_rate} Hz.")
                    except Exception as resample_e:
                        logging.error(f"Resampling error: {resample_e}", exc_info=True)
                        raise ValueError(f"Failed to resample to {TARGET_SAMPLE_RATE} Hz") from resample_e

                final_rate = audio.frame_rate
                if final_rate <= 0:
                    raise ValueError(f"Invalid final sample rate ({final_rate} Hz)")

                with tempfile.NamedTemporaryFile(mode='wb', suffix=output_extension, dir=output_dir, delete=False) as conv_temp_f:
                    temp_path_conv = conv_temp_f.name
                    logging.info(f"Exporting to OGG Opus at {temp_path_conv} with rate {final_rate} Hz")
                    audio.export(temp_path_conv, format="ogg", codec="libopus", bitrate="48k")

                logging.info(f"Audio successfully converted: {temp_path_conv}")
                return temp_path_conv, final_rate
            except CouldntDecodeError as e:
                logging.error(f"Pydub decode error: {input_path}. {e}", exc_info=True)
                raise
            except Exception as e:
                logging.error(f"Audio processing error {input_path}: {e}", exc_info=True)
                if temp_path_conv and os.path.exists(temp_path_conv):
                    try: os.remove(temp_path_conv)
                    except OSError: pass
                raise

        try:
            converted_temp_file_path, detected_sample_rate = await asyncio.to_thread(
                process_audio_sync, downloaded_drive_file_path, config.TEMP_FOLDER, structured_filename
            )
            logging.info(f"Final sample rate: {detected_sample_rate} Hz")
        except ValueError as ve:
            logging.error(f"Sample rate error: {ve}", exc_info=True)
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª (–ø—Ä–æ–±–ª–µ–º–∞ —Å —á–∞—Å—Ç–æ—Ç–æ–π –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏).")
            await state.clear()
            return
        except CouldntDecodeError:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∫–∞—á–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª (–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è).")
            await state.clear()
            return
        except Exception as proc_e:
            logging.error(f"Unexpected audio processing error: {proc_e}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.")
            await state.clear()
            return

        if not detected_sample_rate or detected_sample_rate <= 0:
            logging.error(f"Invalid final sample rate ({detected_sample_rate}). Aborting.")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
            await state.clear()
            return

        await message.answer(f"üëç –ê—É–¥–∏–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ (—Ñ–æ—Ä–º–∞—Ç .ogg, —á–∞—Å—Ç–æ—Ç–∞: {detected_sample_rate} –ì—Ü).")
        await bot.send_chat_action(chat_id, action=ChatAction.UPLOAD_DOCUMENT)

        await message.answer("‚òÅÔ∏è‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...")
        logging.info(f"Starting GCS upload for chat_id {chat_id}: {structured_filename}")
        gcs_uri = await asyncio.to_thread(
            cloud_storage.upload_to_gcs, converted_temp_file_path, structured_filename
        )
        if not gcs_uri:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.")
            await state.clear()
            return
        logging.info(f"File uploaded to {gcs_uri} for chat_id {chat_id}")
        await message.answer(f"üëç –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –æ–±–ª–∞–∫–æ.")
        await bot.send_chat_action(chat_id, action=ChatAction.TYPING)

        await message.answer("üß† –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)...")
        logging.info(f"Starting S2T for chat_id {chat_id} with rate {detected_sample_rate} Hz")
        transcript = await asyncio.to_thread(
            audio_processor.transcribe_audio_gcs, gcs_uri, detected_sample_rate
        )

        if transcript is None:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.")
            await state.clear()
            return

        logging.info(f"S2T completed for chat_id {chat_id}. Transcript length: {len(transcript)}")
        await message.answer("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        await message.answer("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")
        current_user_data = await state.get_data()
        discipline_for_nlp = current_user_data.get('discipline', '–õ–µ–∫—Ü–∏—è')

        logging.info(f"Starting text analysis for chat_id {chat_id}, discipline: {discipline_for_nlp}")
        analysis_results = await text_analyzer.analyze(transcript, discipline_for_nlp)
        logging.info(f"Analysis results for chat_id {chat_id}: {analysis_results}")
        await bot.send_chat_action(chat_id, action=ChatAction.TYPING)

        await message.answer("‚úçÔ∏è –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç...")
        logging.info(f"Starting document generation for chat_id {chat_id}")
        user_data_with_transcript = {**user_data, "transcript": transcript}
        generated_doc_paths = await asyncio.to_thread(
            doc_generator.generate, analysis_results, user_data_with_transcript
        )
        
        if generated_doc_paths:
            generated_doc_path = generated_doc_paths[0]
            logging.info(f"Document generated: {generated_doc_path}")
        else:
            logging.error(f"Document generation failed for chat_id {chat_id}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞.")
        
        await bot.send_chat_action(chat_id, action=ChatAction.UPLOAD_DOCUMENT)
        await message.answer("‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        if generated_doc_path and os.path.exists(generated_doc_path):
            try:
                doc_to_send = FSInputFile(path=generated_doc_path, filename=os.path.basename(generated_doc_path))
                await message.answer_document(document=doc_to_send, caption="–í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤.")
                logging.info(f"Generated document {generated_doc_path} sent to chat_id {chat_id}")
            except Exception as send_doc_e:
                logging.error(f"Error sending document {generated_doc_path}: {send_doc_e}", exc_info=True)
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º.")
        elif not generated_doc_paths:
            pass
        else:
            logging.error(f"Generated report file not found: {generated_doc_path}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞.")

        logging.info(f"Full processing cycle completed for chat_id {chat_id}")
        await state.clear()

    except Exception as e:
        logging.error(f"CRITICAL ERROR in handle_drive_link for chat_id {chat_id}: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
    finally:
        async def cleanup_file(f_path):
            if f_path and os.path.exists(f_path):
                try:
                    await asyncio.to_thread(os.remove, f_path)
                    logging.info(f"Cleaned up temp file: {f_path}")
                except OSError as e:
                    logging.error(f"Error deleting temp file {f_path}: {e}", exc_info=True)
        
        await asyncio.gather(
            cleanup_file(downloaded_drive_file_path),
            cleanup_file(converted_temp_file_path),
            cleanup_file(generated_doc_path)
        )

@registration_router.message(StateFilter(LectureRegistration.waiting_drive_link))
async def handle_drive_link_incorrect_type(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Drive —Ç–µ–∫—Å—Ç–æ–º.")

# --- –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ ---
@dev_router.message(Command("dev_process_txt"))
async def handle_dev_start(message: Message, state: FSMContext):
    chat_id = message.chat.id
    logging.info(f"DEV MODE: Received /dev_process_txt from chat_id {chat_id}")
    await state.clear()
    await message.answer("‚öôÔ∏è –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: –û–±—Ä–∞–±–æ—Ç–∫–∞ TXT.\n1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(DevProcessing.waiting_dev_discipline)

@dev_router.message(StateFilter(DevProcessing.waiting_dev_discipline), F.text)
async def handle_dev_discipline(message: Message, state: FSMContext):
    discipline_name = message.text.strip()
    if not discipline_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    logging.info(f"DEV MODE: Discipline '{discipline_name}' received.")
    await state.update_data(discipline=discipline_name)
    await message.answer(f"DEV: –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ '{discipline_name}'.\n2. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Å–ª–∏—Ç–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤–ò–ò):")
    await state.set_state(DevProcessing.waiting_dev_teacher)

@dev_router.message(StateFilter(DevProcessing.waiting_dev_teacher), F.text)
async def handle_dev_teacher(message: Message, state: FSMContext):
    teacher_name = message.text.strip()
    if not teacher_name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    if ' ' in teacher_name:
        await message.answer("DEV: –û—à–∏–±–∫–∞: –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–ò–≤–∞–Ω–æ–≤–ò–ò).")
        return
    logging.info(f"DEV MODE: Teacher '{teacher_name}' received.")
    await state.update_data(teacher_name=teacher_name)
    await message.answer(f"DEV: –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å '{teacher_name}'.\n3. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–ß–ß:–ú–ú-–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(DevProcessing.waiting_dev_datetime)

@dev_router.message(StateFilter(DevProcessing.waiting_dev_datetime), F.text)
async def handle_dev_datetime_dev(message: Message, state: FSMContext):
    datetime_input = message.text.strip()
    if not datetime_input:
        await message.answer("–î–∞—Ç–∞/–≤—Ä–µ–º—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
        return
    try:
        time_str, date_str = datetime_input.split(config.DATETIME_SPLIT_CHAR)
        datetime.strptime(time_str, config.TIME_FORMAT)
        datetime.strptime(date_str, config.DATE_FORMAT)
        logging.info(f"DEV MODE: DateTime '{datetime_input}' received.")
        await state.update_data(lection_time=time_str, lection_date=date_str)
        await message.answer("‚úÖ DEV: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã.\n4. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª <b>.txt</b> —Å –≥–æ—Ç–æ–≤—ã–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º –ª–µ–∫—Ü–∏–∏.")
        await state.set_state(DevProcessing.waiting_transcript_txt)
    except (ValueError, TypeError):
        await message.answer(f"DEV: –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –Ω—É–∂–µ–Ω –ß–ß:–ú–ú{config.DATETIME_SPLIT_CHAR}–î–î.–ú–ú.–ì–ì–ì–ì.")

@dev_router.message(StateFilter(DevProcessing.waiting_transcript_txt), F.document)
async def handle_dev_transcript_txt(message: Message, state: FSMContext, bot: Bot):
    chat_id = message.chat.id
    document = message.document
    temp_txt_path = None
    generated_doc_path = None
    user_data = await state.get_data()

    if not document.file_name or not document.file_name.lower().endswith('.txt') or document.mime_type != 'text/plain':
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–º–µ–Ω–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>.txt</b>.")
        return

    await message.answer(f"‚úÖ DEV: –§–∞–π–ª {document.file_name} –ø–æ–ª—É—á–µ–Ω ({document.file_size} –±–∞–π—Ç). –ß–∏—Ç–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç...")
    await bot.send_chat_action(chat_id, action=ChatAction.TYPING)

    try:
        with tempfile.NamedTemporaryFile(mode='wb', suffix=".txt", dir=config.TEMP_FOLDER, delete=False) as temp_f:
            temp_txt_path = temp_f.name
            await bot.download(file=document.file_id, destination=temp_txt_path)
            logging.info(f"DEV MODE: Transcript TXT downloaded to {temp_txt_path}")

        with open(temp_txt_path, 'r', encoding='utf-8') as f:
            transcript = f.read()

        if not transcript or not transcript.strip():
            logging.warning(f"DEV MODE: Uploaded TXT file {temp_txt_path} is empty.")
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π TXT —Ñ–∞–π–ª –ø—É—Å—Ç.")
            await state.clear()
            return

        logging.info(f"DEV MODE: Transcript loaded from TXT. Length: {len(transcript)}")

        await message.answer("‚öôÔ∏è DEV: –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞...")
        await message.answer("üìä –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞...")
        current_user_data = await state.get_data()
        discipline_for_nlp = current_user_data.get('discipline', '–õ–µ–∫—Ü–∏—è DEV')

        logging.info(f"DEV MODE: Starting text analysis for chat_id {chat_id}, discipline: {discipline_for_nlp}")
        analysis_results = await text_analyzer.analyze(transcript, discipline_for_nlp)
        logging.info(f"DEV MODE: Analysis results for chat_id {chat_id}: {analysis_results}")
        await bot.send_chat_action(chat_id, action=ChatAction.TYPING)

        await message.answer("‚úçÔ∏è –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç (–∑–∞–≥–ª—É—à–∫–∞)...")
        logging.info(f"DEV MODE: Starting document generation for chat_id {chat_id}")
        user_data_with_transcript = {**user_data, "transcript": transcript}
        generated_doc_paths = await asyncio.to_thread(
            doc_generator.generate, analysis_results, user_data_with_transcript
        )
        
        if generated_doc_paths:
            generated_doc_path = generated_doc_paths[0]
            logging.info(f"DEV MODE: Document generated (stub): {generated_doc_path}")
        else:
            logging.error(f"DEV MODE: Document generation (stub) failed")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞).")

        await bot.send_chat_action(chat_id, action=ChatAction.UPLOAD_DOCUMENT)
        await message.answer("‚ú® DEV MODE: –û–±—Ä–∞–±–æ—Ç–∫–∞ TXT –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        if generated_doc_path and os.path.exists(generated_doc_path):
            try:
                doc_to_send = FSInputFile(path=generated_doc_path, filename=os.path.basename(generated_doc_path))
                await message.answer_document(document=doc_to_send, caption="–í–∞—à DEV –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤.")
                logging.info(f"DEV MODE: Generated document {generated_doc_path} sent to chat_id {chat_id}")
            except Exception as send_doc_e:
                logging.error(f"DEV MODE: Error sending document {generated_doc_path}: {send_doc_e}", exc_info=True)
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º.")
        elif not generated_doc_paths:
            pass
        else:
            logging.error(f"DEV MODE: Generated report file not found: {generated_doc_path}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞.")

        logging.info(f"DEV MODE: TXT processing completed for chat_id {chat_id}")
        await state.clear()

    except Exception as e:
        logging.error(f"CRITICAL ERROR in handle_dev_transcript_txt for chat_id {chat_id}: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ DEV —Ä–µ–∂–∏–º–µ.")
        await state.clear()
    finally:
        if temp_txt_path and os.path.exists(temp_txt_path):
            try:
                await asyncio.to_thread(os.remove, temp_txt_path)
                logging.info(f"DEV MODE: Cleaned up temp TXT file: {temp_txt_path}")
            except OSError as e:
                logging.error(f"DEV MODE: Error deleting temp TXT file {temp_txt_path}: {e}", exc_info=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@common_router.message()
async def handle_unknown(message: Message, state: FSMContext):
    current_state = await state.get_state()
    logging.debug(f"Received unknown message type '{message.content_type}' from chat_id {message.chat.id} in state {current_state}")
    
    if current_state == LectureRegistration.waiting_discipline:
        await message.answer("–†–µ–∂–∏–º –ª–µ–∫—Ü–∏–∏: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏–ª–∏ /reset.")
    elif current_state == LectureRegistration.waiting_teacher:
        await message.answer("–†–µ–∂–∏–º –ª–µ–∫—Ü–∏–∏: –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ /reset.")
    elif current_state == LectureRegistration.waiting_datetime:
        await message.answer(f"–†–µ–∂–∏–º –ª–µ–∫—Ü–∏–∏: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è (–ß–ß:–ú–ú-–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ /reset.")
    elif current_state == LectureRegistration.waiting_drive_link:
        await message.answer("–†–µ–∂–∏–º –ª–µ–∫—Ü–∏–∏: –ñ–¥—É —Å—Å—ã–ª–∫—É Google Drive –∏–ª–∏ /reset.")
    elif current_state == LectureRegistration.waiting_confirmation:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç' –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
    elif current_state == LectureRegistration.waiting_confirmation_correction:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç' –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
    elif current_state == DevProcessing.waiting_dev_discipline:
        await message.answer("DEV –†–µ–∂–∏–º: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏–ª–∏ /reset.")
    elif current_state == DevProcessing.waiting_dev_teacher:
        await message.answer("DEV –†–µ–∂–∏–º: –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ /reset.")
    elif current_state == DevProcessing.waiting_dev_datetime:
        await message.answer(f"DEV –†–µ–∂–∏–º: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è –∏–ª–∏ /reset.")
    elif current_state == DevProcessing.waiting_transcript_txt:
        await message.answer("DEV –†–µ–∂–∏–º: –ñ–¥—É TXT —Ñ–∞–π–ª –∏–ª–∏ /reset.")
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /dev_process_txt.")

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
async def register_aiogram_handlers(dp: Dispatcher, bot: Bot):
    dp.include_router(registration_router)
    dp.include_router(dev_router)
    dp.include_router(common_router)
    logging.info("All handlers registered")

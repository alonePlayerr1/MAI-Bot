# app/telegram_handler_aiogram.py

import asyncio
import logging
import os
import re
import tempfile
from datetime import datetime

# --- Aiogram Imports ---
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, FSInputFile, Document
from aiogram.enums import ChatAction # –î–ª—è send_chat_action

# --- Project Imports ---
import config
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –û–ë–ê –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from config import LectureRegistration, DevProcessing
from app import utils
from app import drive_handler # –ù—É–∂–µ–Ω –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
from app import cloud_storage # –ù—É–∂–µ–Ω –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
from app import audio_processor # –ù—É–∂–µ–Ω –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
from app import text_analyzer # –ù—É–∂–µ–Ω –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤
from app import doc_generator # –ù—É–∂–µ–Ω –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤

# --- pydub Imports ---
# –ù—É–∂–µ–Ω –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
from pydub import AudioSegment
from pydub.exceptions import CouldntDecodeError

# --- –°–æ–∑–¥–∞–µ–º –†–æ—É—Ç–µ—Ä—ã ---
common_router = Router(name="common_commands")
registration_router = Router(name="lecture_registration_fsm")
dev_router = Router(name="developer_tools")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥ (common_router) ---
@common_router.message(CommandStart())
async def handle_start(message: Message, state: FSMContext):
    chat_id = message.chat.id; logging.info(f"/start from {chat_id}")
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—à—É –ª–µ–∫—Ü–∏—é (–æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º).", reply_markup=ReplyKeyboardRemove())
    await message.answer("1. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:")
    await state.set_state(LectureRegistration.waiting_discipline)

@common_router.message(Command("reset"))
async def handle_reset(message: Message, state: FSMContext):
    chat_id = message.chat.id; current_state = await state.get_state()
    logging.info(f"/reset from {chat_id}. State: {current_state}")
    if current_state is not None:
        await state.clear(); await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /dev_process_txt.")
    else: await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞.")

@common_router.message(Command("help"))
async def handle_help(message: Message):
    chat_id = message.chat.id; logging.info(f"/help from {chat_id}")
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π –ª–µ–∫—Ü–∏–π.\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º:</b>\n"
        "1. –ù–∞—á–Ω–∏—Ç–µ —Å /start.\n"
        "2. –í–≤–µ–¥–∏—Ç–µ: –î–∏—Å—Ü–∏–ø–ª–∏–Ω—É -> –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è -> –î–∞—Ç—É/–í—Ä–µ–º—è -> –°—Å—ã–ª–∫—É Google Drive.\n"
        "3. –ë–æ—Ç —Å–∫–∞—á–∞–µ—Ç, –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∞—É–¥–∏–æ –∏ –ø—Ä–∏—à–ª–µ—Ç –æ—Ç—á–µ—Ç.\n\n"
        "<b>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∞ NLP/DocGen):</b>\n"
        "1. –ù–∞—á–Ω–∏—Ç–µ —Å /dev_process_txt.\n"
        "2. –í–≤–µ–¥–∏—Ç–µ: –î–∏—Å—Ü–∏–ø–ª–∏–Ω—É -> –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è -> –î–∞—Ç—É/–í—Ä–µ–º—è.\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª <b>.txt</b> —Å –≥–æ—Ç–æ–≤—ã–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º.\n"
        "4. –ë–æ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ –∏ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏—Ç –∞–Ω–∞–ª–∏–∑/–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ."
    )
    await message.reply(help_text)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (–û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º - registration_router) ---

@registration_router.message(StateFilter(LectureRegistration.waiting_discipline), F.text)
async def handle_discipline(message: Message, state: FSMContext):
    discipline_name = message.text.strip()
    if not discipline_name: await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."); return
    logging.info(f"Discipline '{discipline_name}' received (main flow)")
    await state.update_data(discipline=discipline_name)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: '{discipline_name}'.\n2. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Å–ª–∏—Ç–Ω–æ):")
    await state.set_state(LectureRegistration.waiting_teacher)

@registration_router.message(StateFilter(LectureRegistration.waiting_discipline))
async def handle_discipline_incorrect_type(message: Message): await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º.")

@registration_router.message(StateFilter(LectureRegistration.waiting_teacher), F.text)
async def handle_teacher_name(message: Message, state: FSMContext):
    teacher_name = message.text.strip()
    if not teacher_name: await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."); return
    if ' ' in teacher_name: await message.answer("–û—à–∏–±–∫–∞: –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–ò–≤–∞–Ω–æ–≤–ò–ò)."); return
    logging.info(f"Teacher '{teacher_name}' received (main flow)")
    await state.update_data(teacher_name=teacher_name)
    await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ! –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: '{teacher_name}'.\n3. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–ß–ß:–ú–ú-–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(LectureRegistration.waiting_datetime)

@registration_router.message(StateFilter(LectureRegistration.waiting_teacher))
async def handle_teacher_incorrect_type(message: Message): await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")

@registration_router.message(StateFilter(LectureRegistration.waiting_datetime), F.text)
async def handle_datetime(message: Message, state: FSMContext):
    datetime_input = message.text.strip()
    if not datetime_input: await message.answer("–î–∞—Ç–∞/–≤—Ä–µ–º—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏."); return
    try:
        time_str, date_str = datetime_input.split(config.DATETIME_SPLIT_CHAR)
        datetime.strptime(time_str, config.TIME_FORMAT); datetime.strptime(date_str, config.DATE_FORMAT)
        logging.info(f"DateTime '{datetime_input}' received (main flow)")
        await state.update_data(lection_time=time_str, lection_date=date_str)
        await message.answer(f"–ü–æ–Ω—è–ª! {time_str} ({date_str}).\n4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Å—Å—ã–ª–∫—É Google Drive</b> (–¥–æ—Å—Ç—É–ø '–í—Å–µ–º').")
        await state.set_state(LectureRegistration.waiting_drive_link)
    except (ValueError, TypeError):
        await message.answer(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –Ω—É–∂–µ–Ω –ß–ß:–ú–ú{config.DATETIME_SPLIT_CHAR}–î–î.–ú–ú.–ì–ì–ì–ì.")

@registration_router.message(StateFilter(LectureRegistration.waiting_datetime))
async def handle_datetime_incorrect_type(message: Message): await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è —Ç–µ–∫—Å—Ç–æ–º.")


# ---> –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ô –í–ï–†–°–ò–ò –§–£–ù–ö–¶–ò–ò handle_drive_link <---
@registration_router.message(StateFilter(LectureRegistration.waiting_drive_link), F.text)
async def handle_drive_link(message: Message, state: FSMContext, bot: Bot):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –°—Å—ã–ª–∫–∞ Drive -> –°–∫–∞—á–∏–≤–∞–Ω–∏–µ -> –ö–æ–Ω–≤–µ—Ä—Ç -> GCS -> S2T -> NLP -> DocGen
    """
    chat_id = message.chat.id
    drive_link = message.text.strip() if message.text else None
    user_data = await state.get_data()

    downloaded_drive_file_path = None
    converted_temp_file_path = None
    generated_doc_path = None
    detected_sample_rate = 0
    structured_filename = None # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–¥–µ—Å—å

    # --- 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ ---
    if not drive_link or not re.search(r'drive.google.com/(file/d/|open\?id=|/d/)', drive_link):
        logging.warning(f"–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ Google Drive –æ—Ç chat_id {chat_id}: {drive_link}")
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≤ Google Drive.")
        return

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ Google Drive –æ—Ç chat_id {chat_id}: {drive_link}")
    await message.answer(f"‚úÖ –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!")

    try:
        # --- 2. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Google Drive ---
        await message.answer(f"üì• –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Google Drive...")
        await bot.send_chat_action(chat_id, action=ChatAction.TYPING) # –ò—Å–ø–æ–ª—å–∑—É–µ–º ChatAction
        logging.info(f"–ó–∞–ø—É—Å–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ Drive –¥–ª—è chat_id {chat_id}")

        downloaded_drive_file_path = await asyncio.to_thread(
            drive_handler.download_file_from_drive, drive_link
        )

        if not downloaded_drive_file_path:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ Google Drive –¥–ª—è chat_id {chat_id}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–∑ Google Drive. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ ('–í—Å–µ–º, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞'). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset.")
            await state.clear(); return

        logging.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω –∏–∑ Drive –≤ {downloaded_drive_file_path} –¥–ª—è chat_id {chat_id}")
        await message.answer("üëç –§–∞–π–ª –∏–∑ Google Drive —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω.")
        await bot.send_chat_action(chat_id, action=ChatAction.TYPING)

        # --- 3. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ß–ê–°–¢–û–¢–´ –∏ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ ---
        await message.answer("‚öôÔ∏è –ì–æ—Ç–æ–≤–ª—é –∞—É–¥–∏–æ—Ñ–∞–π–ª (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ —Ñ–æ—Ä–º–∞—Ç Opus)...")
        logging.info(f"–ó–∞–ø—É—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è chat_id {chat_id}")
        output_extension = ".ogg"
        structured_filename = utils.generate_audio_filename(user_data, None, output_extension)

        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∞—É–¥–∏–æ
        def process_audio_sync(input_path, output_dir, filename):
            """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –º–æ–Ω–æ, —Ä–µ—Å–µ–º–ø–ª–∏—Ä—É–µ—Ç –¥–æ 16–∫–ì—Ü –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤ Ogg/Opus."""
            temp_path_conv = None
            TARGET_SAMPLE_RATE = 16000 # –¶–µ–ª–µ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è S2T
            try:
                audio = AudioSegment.from_file(input_path)
                original_rate = audio.frame_rate
                logging.info(f"–ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {audio.duration_seconds:.2f} —Å–µ–∫, –ò—Å—Ö–æ–¥–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {original_rate} –ì—Ü, {audio.channels} –∫–∞–Ω–∞–ª(–∞)")

                if audio.channels > 1:
                    logging.info("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∞—É–¥–∏–æ –≤ –º–æ–Ω–æ...")
                    audio = audio.set_channels(1)

                if original_rate != TARGET_SAMPLE_RATE:
                    logging.info(f"–ò–∑–º–µ–Ω—è—é —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ —Å {original_rate} –ì—Ü –Ω–∞ {TARGET_SAMPLE_RATE} –ì—Ü...")
                    try:
                        audio = audio.set_frame_rate(TARGET_SAMPLE_RATE)
                        logging.info(f"–ß–∞—Å—Ç–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {audio.frame_rate} –ì—Ü.")
                    except Exception as resample_e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥–µ –¥–æ {TARGET_SAMPLE_RATE} –ì—Ü: {resample_e}", exc_info=True)
                        raise ValueError(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –Ω–∞ {TARGET_SAMPLE_RATE} –ì—Ü") from resample_e

                final_rate = audio.frame_rate
                if final_rate <= 0:
                    raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ ({final_rate} –ì—Ü)")

                with tempfile.NamedTemporaryFile(mode='wb', suffix=output_extension, dir=output_dir, delete=False) as conv_temp_f:
                    temp_path_conv = conv_temp_f.name
                    logging.info(f"–≠–∫—Å–ø–æ—Ä—Ç –∞—É–¥–∏–æ –≤ OGG Opus –≤ {temp_path_conv} —Å —á–∞—Å—Ç–æ—Ç–æ–π {final_rate} –ì—Ü")
                    audio.export(temp_path_conv, format="ogg", codec="libopus", bitrate="48k")

                logging.info(f"–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {temp_path_conv}")
                return temp_path_conv, final_rate
            except CouldntDecodeError as e:
                 logging.error(f"Pydub –Ω–µ —Å–º–æ–≥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: {input_path}. {e}", exc_info=True)
                 raise
            except Exception as e:
                 logging.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ {input_path}: {e}", exc_info=True)
                 if temp_path_conv and os.path.exists(temp_path_conv):
                     try: os.remove(temp_path_conv)
                     except OSError: pass
                 raise

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ –≤ –ø–æ—Ç–æ–∫–µ
        try:
            converted_temp_file_path, detected_sample_rate = await asyncio.to_thread(
                process_audio_sync, downloaded_drive_file_path, config.TEMP_FOLDER, structured_filename
            )
            logging.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è/—Ü–µ–ª–µ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {detected_sample_rate} –ì—Ü")
        except ValueError as ve:
             logging.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã: {ve}", exc_info=True)
             await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª (–ø—Ä–æ–±–ª–µ–º–∞ —Å —á–∞—Å—Ç–æ—Ç–æ–π –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset.")
             await state.clear(); return
        except CouldntDecodeError:
             await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∫–∞—á–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª (–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset.")
             await state.clear(); return
        except Exception as proc_e:
             logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {proc_e}", exc_info=True)
             await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset.")
             await state.clear(); return

        if not detected_sample_rate or detected_sample_rate <= 0:
             logging.error(f"–§–∏–Ω–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ({detected_sample_rate}). –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
             await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset.")
             await state.clear(); return

        await message.answer(f"üëç –ê—É–¥–∏–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ (—Ñ–æ—Ä–º–∞—Ç .ogg, —á–∞—Å—Ç–æ—Ç–∞: {detected_sample_rate} –ì—Ü).")
        await bot.send_chat_action(chat_id, action=ChatAction.UPLOAD_DOCUMENT) # –ò—Å–ø–æ–ª—å–∑—É–µ–º ChatAction

        # --- 4. –ó–∞–≥—Ä—É–∑–∫–∞ –≤ GCS ---
        await message.answer("‚òÅÔ∏è‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...")
        logging.info(f"–ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ GCS –¥–ª—è chat_id {chat_id}: {structured_filename}")
        gcs_uri = await asyncio.to_thread(
            cloud_storage.upload_to_gcs, converted_temp_file_path, structured_filename
        )
        if not gcs_uri:
             await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset.")
             await state.clear(); return
        logging.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {gcs_uri} –¥–ª—è chat_id {chat_id}")
        await message.answer(f"üëç –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –æ–±–ª–∞–∫–æ.")
        await bot.send_chat_action(chat_id, action=ChatAction.TYPING)

        # --- 5. –ó–∞–ø—É—Å–∫ S2T (—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π) ---
        await message.answer("üß† –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)...")
        logging.info(f"–ó–∞–ø—É—Å–∫ S2T –¥–ª—è chat_id {chat_id} —Å —á–∞—Å—Ç–æ—Ç–æ–π {detected_sample_rate} –ì—Ü")
        transcript = await asyncio.to_thread(
            audio_processor.transcribe_audio_gcs, gcs_uri, detected_sample_rate
        )

        if transcript is None:
            await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset.")
            await state.clear(); return

        logging.info(f"S2T –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è chat_id {chat_id}. –î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: {len(transcript)}")
        await message.answer("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        # --- 6. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ (–ó–∞–≥–ª—É—à–∫–∞) ---
        # --- 6. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ ---
        await message.answer("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")  # –û–±–Ω–æ–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.info(f"–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è chat_id {chat_id}")
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é analyze
        analysis_results = await asyncio.to_thread(text_analyzer.analyze, transcript)
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è chat_id {chat_id}: {analysis_results}")
        await bot.send_chat_action(chat_id, action=ChatAction.TYPING)

        # --- 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
        await message.answer("‚úçÔ∏è –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç...")  # –û–±–Ω–æ–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.info(f"–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è chat_id {chat_id}")
        # –ü–µ—Ä–µ–¥–∞–µ–º user_data (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ) –∏ analysis_results (–∫–æ–Ω—Å–ø–µ–∫—Ç—ã, –∫–ª—é—á–∏)
        # –¢–∞–∫–∂–µ –ø–µ—Ä–µ–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–æ–≥ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        user_data_with_transcript = {**user_data, "transcript": transcript}
        generated_doc_paths = await asyncio.to_thread(
            doc_generator.generate, analysis_results, user_data_with_transcript
        )
        # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ generated_doc_paths) ...
        if generated_doc_paths:
             generated_doc_path = generated_doc_paths[0]
             logging.info(f"–î–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–∑–∞–≥–ª—É—à–∫–∞): {generated_doc_path}")
        else:
             logging.error(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞) –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Ç—å –¥–ª—è chat_id {chat_id}")
             await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞).")
             # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ñ–∞–π–ª–∞

        await bot.send_chat_action(chat_id, action=ChatAction.UPLOAD_DOCUMENT)

        # --- 8. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
        await message.answer("‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω)
        if generated_doc_path and os.path.exists(generated_doc_path):
            try:
                doc_to_send = FSInputFile(path=generated_doc_path, filename=os.path.basename(generated_doc_path))
                await message.answer_document(document=doc_to_send, caption="–í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ (–ø–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç).")
                logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç {generated_doc_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω chat_id {chat_id}")
            except Exception as send_doc_e:
                 logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {generated_doc_path}: {send_doc_e}", exc_info=True)
                 await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º.")
        elif not generated_doc_paths: pass # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–∂–µ –±—ã–ª–æ
        else:
             logging.error(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {generated_doc_path}")
             await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞.")

        logging.info(f"–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è chat_id {chat_id}")
        await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

    except Exception as e: # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        logging.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ handle_drive_link –¥–ª—è chat_id {chat_id}: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    finally:
        # --- –û—á–∏—Å—Ç–∫–∞ –í—Ä–µ–º–µ–Ω–Ω—ã—Ö –§–∞–π–ª–æ–≤ ---
        async def cleanup_file(f_path):
            if f_path and os.path.exists(f_path):
                try:
                    await asyncio.to_thread(os.remove, f_path)
                    logging.info(f"–û—á–∏—â–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {f_path}")
                except OSError as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {f_path}: {e}", exc_info=True)
        await asyncio.gather(
            cleanup_file(downloaded_drive_file_path),
            cleanup_file(converted_temp_file_path),
            cleanup_file(generated_doc_path)
        )
# ---> –ö–û–ù–ï–¶ –ü–û–õ–ù–û–ô –í–ï–†–°–ò–ò –§–£–ù–ö–¶–ò–ò handle_drive_link <---


@registration_router.message(StateFilter(LectureRegistration.waiting_drive_link))
async def handle_drive_link_incorrect_type(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Drive —Ç–µ–∫—Å—Ç–æ–º.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (dev_router) ---

@dev_router.message(Command("dev_process_txt"))
async def handle_dev_start(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ TXT —Ñ–∞–π–ª–∞."""
    chat_id = message.chat.id
    logging.info(f"DEV MODE: Received /dev_process_txt from chat_id {chat_id}")
    await state.clear()
    await message.answer("‚öôÔ∏è –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: –û–±—Ä–∞–±–æ—Ç–∫–∞ TXT.\n1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:")
    await state.set_state(DevProcessing.waiting_dev_discipline)

@dev_router.message(StateFilter(DevProcessing.waiting_dev_discipline), F.text)
async def handle_dev_discipline(message: Message, state: FSMContext):
    discipline_name = message.text.strip();
    if not discipline_name: await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."); return
    logging.info(f"DEV MODE: Discipline '{discipline_name}' received.")
    await state.update_data(discipline=discipline_name)
    await message.answer(f"DEV: –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ '{discipline_name}'.\n2. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Å–ª–∏—Ç–Ω–æ):")
    await state.set_state(DevProcessing.waiting_dev_teacher)

@dev_router.message(StateFilter(DevProcessing.waiting_dev_discipline))
async def handle_dev_discipline_incorrect(message: Message): await message.answer("DEV: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º.")

@dev_router.message(StateFilter(DevProcessing.waiting_dev_teacher), F.text)
async def handle_dev_teacher(message: Message, state: FSMContext):
    teacher_name = message.text.strip()
    if not teacher_name: await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."); return
    if ' ' in teacher_name: await message.answer("DEV: –û—à–∏–±–∫–∞: –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–ò–≤–∞–Ω–æ–≤–ò–ò)."); return
    logging.info(f"DEV MODE: Teacher '{teacher_name}' received.")
    await state.update_data(teacher_name=teacher_name)
    await message.answer(f"DEV: –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å '{teacher_name}'.\n3. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–ß–ß:–ú–ú-–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(DevProcessing.waiting_dev_datetime)

@dev_router.message(StateFilter(DevProcessing.waiting_dev_teacher))
async def handle_dev_teacher_incorrect(message: Message): await message.answer("DEV: –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")

@dev_router.message(StateFilter(DevProcessing.waiting_dev_datetime), F.text)
async def handle_dev_datetime_dev(message: Message, state: FSMContext): # –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
    datetime_input = message.text.strip()
    if not datetime_input: await message.answer("–î–∞—Ç–∞/–≤—Ä–µ–º—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏."); return
    try:
        time_str, date_str = datetime_input.split(config.DATETIME_SPLIT_CHAR)
        datetime.strptime(time_str, config.TIME_FORMAT); datetime.strptime(date_str, config.DATE_FORMAT)
        logging.info(f"DEV MODE: DateTime '{datetime_input}' received.")
        await state.update_data(lection_time=time_str, lection_date=date_str)
        await message.answer("‚úÖ DEV: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã.\n4. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª <b>.txt</b> —Å –≥–æ—Ç–æ–≤—ã–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–º –ª–µ–∫—Ü–∏–∏.")
        await state.set_state(DevProcessing.waiting_transcript_txt)
    except (ValueError, TypeError):
        await message.answer(f"DEV: –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –Ω—É–∂–µ–Ω –ß–ß:–ú–ú{config.DATETIME_SPLIT_CHAR}–î–î.–ú–ú.–ì–ì–ì–ì.")

@dev_router.message(StateFilter(DevProcessing.waiting_dev_datetime))
async def handle_dev_datetime_incorrect(message: Message): await message.answer("DEV: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è —Ç–µ–∫—Å—Ç–æ–º.")


@dev_router.message(StateFilter(DevProcessing.waiting_transcript_txt), F.document)
async def handle_dev_transcript_txt(message: Message, state: FSMContext, bot: Bot):
    """–ü–æ–ª—É—á–∞–µ—Ç TXT —Ñ–∞–π–ª, —á–∏—Ç–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç NLP/DocGen."""
    chat_id = message.chat.id
    document = message.document
    temp_txt_path = None
    generated_doc_path = None
    user_data = await state.get_data()

    if not document.file_name or not document.file_name.lower().endswith('.txt') or document.mime_type != 'text/plain':
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–º–µ–Ω–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>.txt</b>.")
        return

    await message.answer(f"‚úÖ DEV: –§–∞–π–ª {document.file_name} –ø–æ–ª—É—á–µ–Ω ({document.file_size} –±–∞–π—Ç). –ß–∏—Ç–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç...")
    await bot.send_chat_action(chat_id, action=ChatAction.TYPING)

    try:
        with tempfile.NamedTemporaryFile(mode='wb', suffix=".txt", dir=config.TEMP_FOLDER, delete=False) as temp_f:
            temp_txt_path = temp_f.name
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º download –æ–±—ä–µ–∫—Ç–∞ —Ñ–∞–π–ª–∞
            await bot.download(file=document.file_id, destination=temp_txt_path)
            logging.info(f"DEV MODE: Transcript TXT downloaded to {temp_txt_path}")

        with open(temp_txt_path, 'r', encoding='utf-8') as f:
            transcript = f.read()

        if not transcript or not transcript.strip():
            logging.warning(f"DEV MODE: Uploaded TXT file {temp_txt_path} is empty.")
            await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π TXT —Ñ–∞–π–ª –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º.")
            await state.clear(); return

        logging.info(f"DEV MODE: Transcript loaded from TXT. Length: {len(transcript)}")

        # --- –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥–∏ 2, 3, 4, 5 (Drive, Convert, GCS, S2T) ---
        # --- –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥–∞–º 6, 7, 8 ---

        await message.answer("‚öôÔ∏è DEV: –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞...")

        # --- 6. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ ---
        await message.answer("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç (–∑–∞–≥–ª—É—à–∫–∞)...")
        logging.info(f"DEV MODE: –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è chat_id {chat_id}")
        analysis_results = await asyncio.to_thread(text_analyzer.analyze, transcript)
        logging.info(f"DEV MODE: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ (–∑–∞–≥–ª—É—à–∫–∞): {analysis_results}")
        await bot.send_chat_action(chat_id, action=ChatAction.TYPING)

        # --- 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
        await message.answer("‚úçÔ∏è –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç (–∑–∞–≥–ª—É—à–∫–∞)...")
        logging.info(f"DEV MODE: –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è chat_id {chat_id}")
        user_data_with_transcript = {**user_data, "transcript": transcript}
        generated_doc_paths = await asyncio.to_thread(
            doc_generator.generate, analysis_results, user_data_with_transcript
        )
        if generated_doc_paths:
             generated_doc_path = generated_doc_paths[0]
             logging.info(f"DEV MODE: –î–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–∑–∞–≥–ª—É—à–∫–∞): {generated_doc_path}")
        else:
             logging.error(f"DEV MODE: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞) –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Ç—å")
             await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞).")

        await bot.send_chat_action(chat_id, action=ChatAction.UPLOAD_DOCUMENT)

        # --- 8. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
        await message.answer("‚ú® DEV MODE: –û–±—Ä–∞–±–æ—Ç–∫–∞ TXT –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

        if generated_doc_path and os.path.exists(generated_doc_path):
            try:
                doc_to_send = FSInputFile(path=generated_doc_path, filename=os.path.basename(generated_doc_path))
                await message.answer_document(document=doc_to_send, caption="–í–∞—à DEV –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤.")
                logging.info(f"DEV MODE: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç {generated_doc_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω chat_id {chat_id}")
            except Exception as send_doc_e:
                 logging.error(f"DEV MODE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {generated_doc_path}: {send_doc_e}", exc_info=True)
                 await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º.")
        elif not generated_doc_paths: pass
        else:
             logging.error(f"DEV MODE: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {generated_doc_path}")
             await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞.")

        logging.info(f"DEV MODE: –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ TXT —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è chat_id {chat_id}")
        await state.clear()

    except Exception as e:
        logging.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ handle_dev_transcript_txt –¥–ª—è chat_id {chat_id}: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ DEV —Ä–µ–∂–∏–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset.")
        await state.clear()
    finally:
        if temp_txt_path and os.path.exists(temp_txt_path):
            try:
                await asyncio.to_thread(os.remove, temp_txt_path)
                logging.info(f"DEV MODE: –û—á–∏—â–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π TXT —Ñ–∞–π–ª: {temp_txt_path}")
            except OSError as e:
                logging.error(f"DEV MODE: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ TXT —Ñ–∞–π–ª–∞ {temp_txt_path}: {e}", exc_info=True)

@dev_router.message(StateFilter(DevProcessing.waiting_transcript_txt))
async def handle_dev_txt_incorrect_type(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (common_router) ---
@common_router.message()
async def handle_unknown(message: Message, state: FSMContext):
    current_state = await state.get_state()
    logging.debug(f"Received unknown message type '{message.content_type}' from chat_id {message.chat.id} in state {current_state}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π FSM
    if current_state == LectureRegistration.waiting_discipline: await message.answer("–†–µ–∂–∏–º –ª–µ–∫—Ü–∏–∏: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏–ª–∏ /reset.")
    elif current_state == LectureRegistration.waiting_teacher: await message.answer("–†–µ–∂–∏–º –ª–µ–∫—Ü–∏–∏: –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ /reset.")
    elif current_state == LectureRegistration.waiting_datetime: await message.answer(f"–†–µ–∂–∏–º –ª–µ–∫—Ü–∏–∏: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è (–ß–ß:–ú–ú-–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ /reset.")
    elif current_state == LectureRegistration.waiting_drive_link: await message.answer("–†–µ–∂–∏–º –ª–µ–∫—Ü–∏–∏: –ñ–¥—É —Å—Å—ã–ª–∫—É Google Drive –∏–ª–∏ /reset.")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DEV FSM
    elif current_state == DevProcessing.waiting_dev_discipline: await message.answer("DEV –†–µ–∂–∏–º: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏–ª–∏ /reset.")
    elif current_state == DevProcessing.waiting_dev_teacher: await message.answer("DEV –†–µ–∂–∏–º: –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ /reset.")
    elif current_state == DevProcessing.waiting_dev_datetime: await message.answer(f"DEV –†–µ–∂–∏–º: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è –∏–ª–∏ /reset.")
    elif current_state == DevProcessing.waiting_transcript_txt: await message.answer("DEV –†–µ–∂–∏–º: –ñ–¥—É TXT —Ñ–∞–π–ª –∏–ª–∏ /reset.")
    else: await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /dev_process_txt.")


# --- –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤ ---
async def register_aiogram_handlers(dp: Dispatcher, bot: Bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –≤ –≥–ª–∞–≤–Ω–æ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ."""
    # –í–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫: —Å–Ω–∞—á–∞–ª–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ FSM, –ø–æ—Ç–æ–º –æ–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    dp.include_router(registration_router) # –û—Å–Ω–æ–≤–Ω–æ–π FSM
    dp.include_router(dev_router)          # FSM –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    dp.include_router(common_router)       # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ catch-all
    logging.info("Aiogram command, FSM, and DEV handlers registered.")